--- Source/JavaScriptCore/runtime/OptionsList.h.orig
+++ Source/JavaScriptCore/runtime/OptionsList.h
@@ -584,7 +584,7 @@
     using Unsigned = unsigned;
     using Double = double;
     using Int32 = int32_t;
-    using Size = size_t;
+    using Size = uint64_t;
     using OptionRange = JSC::OptionRange;
     using OptionString = const char*;
     using GCLogLevel = GCLogging::Level;
--- Source/JavaScriptCore/API/glib/JSCOptions.cpp.orig
+++ Source/JavaScriptCore/API/glib/JSCOptions.cpp
@@ -73,28 +73,26 @@
     g_value_set_int(gValue, value);
 }
 
-#if CPU(ADDRESS64)
-static bool valueFromGValue(const GValue* gValue, unsigned& value)
+static bool valueFromGValue(const GValue* gValue, guint& value)
 {
     value = g_value_get_uint(gValue);
     return true;
 }
 
-static void valueToGValue(unsigned value, GValue* gValue)
+static void valueToGValue(guint value, GValue* gValue)
 {
     g_value_set_uint(gValue, value);
 }
-#endif
 
-static bool valueFromGValue(const GValue* gValue, size_t& value)
+static bool valueFromGValue(const GValue* gValue, guint64& value)
 {
-    value = GPOINTER_TO_SIZE(g_value_get_pointer(gValue));
+    value = g_value_get_uint64(gValue);
     return true;
 }
 
-static void valueToGValue(size_t value, GValue* gValue)
+static void valueToGValue(guint64 value, GValue* gValue)
 {
-    g_value_set_pointer(gValue, GSIZE_TO_POINTER(value));
+    g_value_set_uint64(gValue, value);
 }
 
 static bool valueFromGValue(const GValue* gValue, const char*& value)
@@ -352,8 +350,8 @@
     g_return_val_if_fail(option, FALSE);
 
     GValue gValue = G_VALUE_INIT;
-    g_value_init(&gValue, G_TYPE_POINTER);
-    g_value_set_pointer(&gValue, GSIZE_TO_POINTER(value));
+    g_value_init(&gValue, G_TYPE_UINT64);
+    g_value_set_uint64(&gValue, value);
     return jscOptionsSetValue(option, &gValue);
 }
 
@@ -374,11 +372,11 @@
     g_return_val_if_fail(value, FALSE);
 
     GValue gValue = G_VALUE_INIT;
-    g_value_init(&gValue, G_TYPE_POINTER);
+    g_value_init(&gValue, G_TYPE_UINT64);
     if (!jscOptionsGetValue(option, &gValue))
         return FALSE;
 
-    *value = GPOINTER_TO_SIZE(g_value_get_pointer(&gValue));
+    *value = g_value_get_uint64(&gValue);
     return TRUE;
 }
 
@@ -542,14 +540,12 @@
     return JSC_OPTION_INT;
 }
 
-#if CPU(ADDRESS64)
 static JSCOptionType jscOptionsType(unsigned)
 {
     return JSC_OPTION_UINT;
 }
-#endif
 
-static JSCOptionType jscOptionsType(size_t)
+static JSCOptionType jscOptionsType(uint64_t)
 {
     return JSC_OPTION_SIZE;
 }
