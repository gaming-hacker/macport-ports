--- Source/WTF/wtf/glib/FileSystemGlib.cpp.orig	2021-08-28 14:43:05.000000000 -0400
+++ Source/WTF/wtf/glib/FileSystemGlib.cpp	2021-08-28 14:45:33.000000000 -0400
@@ -62,7 +62,7 @@
     ASSERT(filenameCharsets);
     // FIXME: If possible, we'd want to convert directly to UTF-16 and construct
     // WTF::String object with resulting data.
-    size_t utf8Length = 0;
+    gsize utf8Length = 0;
     GUniquePtr<gchar> utf8(g_convert(representation, representationLength,
         "UTF-8", filenameCharsets[0], nullptr, &utf8Length, nullptr));
     if (!utf8)
@@ -86,7 +86,7 @@
 
     ASSERT(filenameCharsets);
     // FIXME: If possible, we'd want to convert directly from WTF::String's UTF-16 data.
-    size_t representationLength = 0;
+    gsize representationLength = 0;
     GUniquePtr<gchar> representation(g_convert(utf8.data(), utf8.length(),
         filenameCharsets[0], "UTF-8", nullptr, &representationLength, nullptr));
     if (!representation)
--- Source/JavaScriptCore/inspector/remote/glib/RemoteInspectorUtils.cpp.orig
+++ Source/JavaScriptCore/inspector/remote/glib/RemoteInspectorUtils.cpp
@@ -60,7 +60,7 @@
     static CString hexDigest;
     if (hexDigest.isNull()) {
         auto bytes = backendCommands();
-        size_t dataSize;
+        gsize dataSize;
         gconstpointer data = g_bytes_get_data(bytes.get(), &dataSize);
         ASSERT(dataSize);
         SHA1 sha1;
