--- gdb/remote.c.orig
+++ gdb/remote.c
@@ -64,7 +64,6 @@
 #include "macosx-nat-dyld.h"
 #include "macosx-nat-dyld-process.h"
 #endif
-#include <execinfo.h>
 
 /* Prototypes for local functions.  */
 static void cleanup_sigint_signal_handler (void *dummy);
@@ -478,11 +477,8 @@
 static void
 remote_backtrace_self (const char *message)
 {
-  void *bt_buffer[100];
-  int count = backtrace (bt_buffer, 100);
   if (message && message[0])
     fprintf_filtered (gdb_stderr, "%s", message);
-  backtrace_symbols_fd (bt_buffer, count, STDERR_FILENO);
 }
 
 static void
--- gdb/utils.c.orig
+++ gdb/utils.c
@@ -28,7 +28,6 @@
 #include "event-top.h"
 #include "exceptions.h"
 #include "bfd.h"
-#include <execinfo.h>
 #include <sys/resource.h>
 #include <uuid/uuid.h>
 #include <regex.h>
@@ -883,10 +882,6 @@
   /* APPLE LOCAL: Do a stack crawl of how we got here so we're more likely
      to get useful bug reports.  */
   {
-    void *bt_buffer[15];
-    int count = backtrace (bt_buffer, 15);
-    fprintf (stderr, "gdb stack crawl at point of internal error:\n");
-    backtrace_symbols_fd (bt_buffer, count, STDERR_FILENO);
   }
 
   /* Create a string containing the full error/warning message.  Need
--- gdb/macosx/macosx-nat-dyld.c.orig
+++ gdb/macosx/macosx-nat-dyld.c
@@ -791,7 +791,7 @@
        }
      else
        {
-#if defined (NM_NEXTSTEP)
+#if 0
           if (macosx_status->task == TASK_NULL)
             return 0;
 
--- gdb/macosx/macosx-nat-inferior.c.orig
+++ gdb/macosx/macosx-nat-inferior.c
@@ -60,13 +60,10 @@
 #include <sys/sysctl.h>
 #include <sys/proc.h>
 #include <mach/mach_error.h>
-#include <spawn.h>
 
 #include <semaphore.h>
 
 #include <dlfcn.h>
-#include <libproc.h>
-#include <sys/proc_info.h>
 
 #include "macosx-nat-dyld.h"
 #include "macosx-nat-inferior.h"
@@ -2701,33 +2698,6 @@
   if (tp->private == NULL || tp->private->app_thread_port == 0)
     return NULL;
 
-  thread_identifier_info_data_t tident;
-  unsigned int info_count;
-  kern_return_t kret;
-  struct proc_threadinfo pth;
-  int retval;
-
-  info_count = THREAD_IDENTIFIER_INFO_COUNT;
-  kret = thread_info (tid, THREAD_IDENTIFIER_INFO, (thread_info_t) &tident,
-                      &info_count);
-  MACH_CHECK_ERROR (kret);
-  retval = proc_pidinfo (pid, PROC_PIDTHREADINFO, tident.thread_handle,
-                         &pth, sizeof (pth));
-  if (retval != 0 && pth.pth_name[0] != '\0') 
-    {
-      strlcpy (buf, pth.pth_name, sizeof (buf));
-    } 
-  else 
-    {
-      if (tident.thread_handle) 
-        {
-          char *queue_name = get_dispatch_queue_name (tident.dispatch_qaddr);
-          if (queue_name && queue_name[0] != '\0')
-            {
-              strlcpy (buf, queue_name, sizeof (buf));
-            }
-        }
-    }
   return buf;
 }
 
--- gdb/macosx/macosx-nat-infthread.c.orig
+++ gdb/macosx/macosx-nat-infthread.c
@@ -36,9 +36,6 @@
 #include <sys/dir.h>
 #include <inttypes.h>
 
-#include <libproc.h>
-#include <sys/proc_info.h>
-
 #include "macosx-nat-inferior.h"
 #include "macosx-nat-inferior-util.h"
 #include "macosx-nat-inferior-debug.h"
@@ -810,76 +807,6 @@
     print_stack_frame (get_selected_frame (NULL), 0, LOCATION);
     switch_to_thread (current_ptid);
 
-  thread_identifier_info_data_t tident;
-  info_count = THREAD_IDENTIFIER_INFO_COUNT;
-  kret = thread_info (tid, THREAD_IDENTIFIER_INFO, (thread_info_t) &tident, 
-                      &info_count);
-  MACH_CHECK_ERROR (kret);
-
-  printf_filtered ("\tpthread ID: 0x%s\n",
-                   paddr_nz (tident.thread_handle));
-  printf_filtered ("\tsystem-wide unique thread id: 0x%s\n", 
-                   paddr_nz (tident.thread_id));
-
-  /* If the pthread_self() value for this thread is 0x0, we have a thread
-     that is very early in the setup process (e.g. it is in 
-     _pthread_struct_init () or something like that) -- it most likely 
-     has a bogus dispatch_qaddr value.  Save ourself a couple of 
-     memory_error()s and just skip this processing.  */
-  if (tident.thread_handle != 0)
-    {
-      char *queue_name = get_dispatch_queue_name (tident.dispatch_qaddr);
-      if (queue_name && queue_name[0] != '\0')
-        printf_filtered ("\tdispatch queue name: \"%s\"\n", queue_name);
-
-      uint32_t queue_flags;
-      if (get_dispatch_queue_flags (tident.dispatch_qaddr, &queue_flags))
-        {
-                printf_filtered ("\tdispatch queue flags: 0x%x", queue_flags);
-                /* Constants defined in libdispatch's src/private.h,
-                   dispatch_queue_flags_t */
-                if (queue_flags & 0x1)
-                  printf_filtered (" (concurrent)");
-                if (queue_flags & 0x4)
-                  printf_filtered (" (always locked)");
-                printf_filtered ("\n");
-        }
-    }
-
-  struct proc_threadinfo pth;
-  int retval;
-  retval = proc_pidinfo (PIDGET (ptid), PROC_PIDTHREADINFO, 
-                         tident.thread_handle, &pth, sizeof (pth));
-  if (retval != 0)
-    {
-      if (pth.pth_name[0] != '\0')
-        printf_filtered ("\tthread name: \"%s\"\n", pth.pth_name);
-
-      printf_filtered ("\ttotal user time: %" PRIu64 "\n", pth.pth_user_time);
-      printf_filtered ("\ttotal system time: %" PRIu64 "\n", pth.pth_system_time);
-      printf_filtered ("\tscaled cpu usage percentage: %d\n", pth.pth_cpu_usage);
-      printf_filtered ("\tscheduling policy in effect: 0x%x\n", pth.pth_policy);
-      printf_filtered ("\trun state: 0x%x", pth.pth_run_state);
-      switch (pth.pth_run_state) {
-          case TH_STATE_RUNNING: printf_filtered (" (RUNNING)\n"); break;
-          case TH_STATE_STOPPED: printf_filtered (" (STOPPED)\n"); break;
-          case TH_STATE_WAITING: printf_filtered (" (WAITING)\n"); break;
-          case TH_STATE_UNINTERRUPTIBLE: printf_filtered (" (UNINTERRUPTIBLE)\n"); break;
-          case TH_STATE_HALTED: printf_filtered (" (HALTED)\n"); break;
-          default: printf_filtered ("\n");
-      }
-      printf_filtered ("\tflags: 0x%x", pth.pth_flags);
-      switch (pth.pth_flags) {
-          case TH_FLAGS_SWAPPED: printf_filtered (" (SWAPPED)\n"); break;
-          case TH_FLAGS_IDLE: printf_filtered (" (IDLE)\n"); break;
-          default: printf_filtered ("\n");
-      }
-      printf_filtered ("\tnumber of seconds that thread has slept: %d\n", 
-                                                   pth.pth_sleep_time);
-      printf_filtered ("\tcurrent priority: %d\n", pth.pth_priority);
-      printf_filtered ("\tmax priority: %d\n", pth.pth_maxpriority);
-    }
-
   printf_filtered ("\tsuspend count: %d", info.suspend_count);
 
   if (info.sleep_time == 0)
@@ -1175,39 +1102,6 @@
   ui_out_field_string (uiout, "state", unparse_run_state (info.run_state));
   ui_out_field_fmt (uiout, "mach-port-number", "0x%s", 
                     paddr_nz (app_thread_name));
-
-  thread_identifier_info_data_t tident;
-  info_count = THREAD_IDENTIFIER_INFO_COUNT;
-  kret = thread_info (tid, THREAD_IDENTIFIER_INFO, (thread_info_t) &tident, 
-                      &info_count);
-  MACH_CHECK_ERROR (kret);
-
-  ui_out_field_fmt (uiout, "pthread-id", "0x%s", 
-                    paddr_nz (tident.thread_handle));
-  ui_out_field_fmt (uiout, "unique-id", "0x%s", 
-                    paddr_nz (tident.thread_id));
-
-
-  struct proc_threadinfo pth;
-  int retval;
-  retval = proc_pidinfo (PIDGET (ptid), PROC_PIDTHREADINFO, 
-                         tident.thread_handle, &pth, sizeof (pth));
-  if (retval != 0 && pth.pth_name[0] != '\0')
-    ui_out_field_string (uiout, "name", pth.pth_name);
-
-  if (tident.thread_handle != 0)
-    {
-      char *queue_name = get_dispatch_queue_name (tident.dispatch_qaddr);
-      if (queue_name && queue_name[0] != '\0') 
-        {
-          ui_out_field_string (uiout, "workqueue", queue_name);
-          CORE_ADDR struct_addr;
-          struct_addr = get_dispatch_queue_addr (tident.dispatch_qaddr);
-          if (struct_addr != 0)
-            ui_out_field_fmt (uiout, "workqueue_addr", "0x%s",
-                              paddr_nz (struct_addr));
-        }
-    }
 }
 
 
--- gdb/macosx/macosx-nat-info.c.orig
+++ gdb/macosx/macosx-nat-info.c
@@ -268,8 +268,8 @@
   {
     union
     {
-      struct __darwin_ppc_thread_state thread;
-      struct __darwin_ppc_exception_state exception;
+      ppc_thread_state_t thread;
+      ppc_exception_state_t exception;
     } thread_state;
     int register_count, i;
     unsigned int *register_data;
@@ -282,7 +282,7 @@
     MACH_CHECK_ERROR (result);
 
     printf_unfiltered ("\nPPC_THREAD_STATE \n");
-    register_data = &thread_state.thread.__r0;
+    register_data = &thread_state.thread.r0;
     register_count = 0;
     for (i = 0; i < 8; ++i)
       {
@@ -297,11 +297,11 @@
       }
 
     printf_unfiltered ("srr0: 0x%08x    srr1: 0x%08x\n",
-                       thread_state.thread.__srr0, thread_state.thread.__srr1);
+                       thread_state.thread.srr0, thread_state.thread.srr1);
     printf_unfiltered ("cr:   0x%08x    xer:  0x%08x\n",
-                       thread_state.thread.__cr, thread_state.thread.__xer);
+                       thread_state.thread.cr, thread_state.thread.xer);
     printf_unfiltered ("lr:   0x%08x    ctr:  0x%08x\n",
-                       thread_state.thread.__lr, thread_state.thread.__ctr);
+                       thread_state.thread.lr, thread_state.thread.ctr);
   }
 #endif
 }
