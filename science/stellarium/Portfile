# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem      1.0
PortGroup       github 1.0
PortGroup       cmake 1.0
PortGroup       qt5 1.0

name            stellarium
categories      science
platforms       darwin
license         GPL-2+
maintainers     {michaelld @michaelld} openmaintainer

description     Stellarium is a free open source planetarium for your computer.
long_description ${description} \
    It shows a realistic sky in 3D, just like what you see with the naked eye, \
    binoculars or a telescope. It is being used in planetarium projectors. Just \
    set your coordinates and go.
homepage        https://stellarium.org/

conflicts           stellarium-qt4
github.setup        Stellarium stellarium 0.21.1 v
checksums           rmd160  c4a69f8b9bab6e9f3e1885c68139bf2ff6016130 \
                    sha256  c7893ac0f64d186f2feaebcfbb79a3306c71adf6005ef894b44c0d8a04e32f20 \
                    size    362256651
revision            0

# builds as 64-bit only, according to its top-level CMakeLists.txt file
universal_variant   no

qt5.depends_component qtlocation qtmultimedia qtscript qtserialport qttools

depends_lib-append \
    port:zlib \
    path:lib/libgps.dylib:gpsd \
    port:gettext \
    port:doxygen

# for libqcocoa.dylib (if not above)
depends_lib-append \
    path:lib/pkgconfig/glib-2.0.pc:glib2 \
    port:fontconfig \
    port:freetype

# fix the install prefix for MP use only
patchfiles-append patch-CMakeLists.txt.diff

compiler.c_standard   2011
compiler.cxx_standard 2011

# do VPATH (out of source tree) build
cmake.out_of_source yes

# prevent opportunistic use of ccache
if {![tbool configure.ccache]} {
    configure.args-append -DCCACHE_PROGRAM=""
}

# special args for our needs
configure.args-append \
    -DMP_APPLICATIONS_DIR=${applications_dir}

# This post-destroot phase is similar to the 'make macosx_bundle' target,
# but it does not copy libraries into the bundle and does not require perl as
# another dependency
post-destroot {
    set appdir ${destroot}${applications_dir}/Stellarium.app/Contents

    # move App parts around internally
    move ${appdir}/share ${appdir}/Resources

    # copy other useful file(s)
    copy ${worksrcpath}/util/qt.conf ${appdir}/Resources/

    # copy the required qcocoa plugin
    xinstall -m 755 -d ${appdir}/plugins/platforms
    copy ${qt_plugins_dir}/platforms/libqcocoa.dylib \
        ${appdir}/plugins/platforms
}

# this is the only part of Stellarium that requires Python
variant RemoteControl description "build RemoteControl plugin" {}

default_variants-append +RemoteControl

if {[variant_isset RemoteControl]} {

    # specify the Python dependencies; these are checked for at configure,
    # then used for building, but not at runtime.

    set pythons_versions {2.7 3.5 3.6 3.7 3.8 3.9}

    set pythons_ports {}
    foreach s ${pythons_versions} {
        lappend pythons_ports python[string map {. {}} ${s}]
    }

    foreach v ${pythons_versions} {
        set s [string map {. {}} ${v}]
        set p python${s}
        set i [lsearch -exact ${pythons_ports} ${p}]
        set c [lreplace ${pythons_ports} ${i} ${i}]
        variant ${p} description "Build ${name} using Python ${v}" conflicts {*}${c} ""
    }

    #default to Python 3.9
    set selected_python_no_dot 39
    foreach v ${pythons_versions} {
        set s [string map {. {}} ${v}]
        if {[variant_isset python${s}]} {
            set selected_python_no_dot ${s}
        }
    }
    default_variants +python${selected_python_no_dot}

    # make sure the default python variant wasn't
    # deselected without selecting another one
    set selected_python_no_dot ""
    foreach v ${pythons_versions} {
        set s [string map {. {}} ${v}]
        if {[variant_isset python${s}]} {
            set selected_python_no_dot ${s}
        }
    }

    if {${selected_python_no_dot} eq ""} {
        set py_vars ""
        set final_s [string map {. {}} [lindex ${pythons_versions} end]]
        foreach s ${pythons_suffixes} {
            if {${s} eq ${final_s}} {
                set py_vars "${py_vars}or "
            }
            set py_vars "${py_vars}+python${s}"
            if {${s} ne ${final_s}} {
                set py_vars "${py_vars}, "
            }
        }
        ui_error "\n\nYou must select one of the variants ${py_vars}.\n"
        return -code error "Invalid variant selection"
    }

    set PythonVersionNoDot ${selected_python_no_dot}

    set PythonVersionWithDot [join [split ${selected_python_no_dot} ""] "."]

    set PythonTopDir "${frameworks_dir}/Python.framework/Versions/${PythonVersionWithDot}"

    set PythonName python${PythonVersionWithDot}

    # required Python
    depends_lib-append \
        port:python${PythonVersionNoDot}

    # special args for our needs
    configure.args-append \
        -DPYTHON_EXECUTABLE=${prefix}/bin/python${PythonVersionWithDot} \
        -DUSE_PLUGIN_REMOTECONTROL=YES

} else {

    configure.args-append \
        -DPYTHON_EXECUTABLE= \
        -DUSE_PLUGIN_REMOTECONTROL=NO

}
