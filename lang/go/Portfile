# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

PortGroup           legacysupport 1.1

legacysupport.newest_darwin_requires_legacy 16

name                go
epoch               3

# IMPORTANT:
#
# When updating major versions, please ensure that you have committed and
# tested the candidate version using the `go-devel` port, to verify how it
# builds against current and older versions of macOS.

# Go 1.18 does not build on macOS 10.12 and older
if {${os.platform} eq "darwin" && ${os.major} < 17} {
    version         1.17.11
    set unsupported_macos true
} else {
    version         1.18.3
    set unsupported_macos false
}

revision            0

# Subport for Go Unstable Version
subport ${name}-devel {
    version         1.17.10
    revision        0
    epoch           1
}

homepage            https://golang.org

categories          lang
platforms           darwin freebsd linux
license             BSD
description         compiled, garbage-collected, concurrent programming \
                    language developed by Google Inc.

long_description    \
    The Go programming language is an open source project to make programmers \
    more productive. Go is expressive, concise, clean, and efficient. Its \
    concurrency mechanisms make it easy to write programs that get the most \
    out of multicore and networked machines, while its novel type system \
    enables flexible and modular program construction. Go compiles quickly \
    to machine code yet has the convenience of garbage collection and the \
    power of run-time reflection. It's a fast, statically typed, compiled \
    language that feels like a dynamically typed, interpreted language. Go \
    is developed by Google Inc.

set go_src_dist     go${version}.src${extract.suffix}
set go_armbin_dist  go${version}.darwin-arm64${extract.suffix}
set go_amdbin_dist  go${version}.darwin-amd64${extract.suffix}

livecheck.type      regex
livecheck.url       ${homepage}/dl/

if {$subport eq "${name}-devel"} {
    # Go (DEVEL / UNSTABLE)
    checksums       ${go_src_dist} \
                    rmd160  b7a893fb09abf0923cbe80b62dcdeeec2049d257 \
                    sha256  299e55af30f15691b015d8dcf8ecae72412412569e5b2ece20361753a456f2f9 \
                    size    22196380 \
                    ${go_armbin_dist} \
                    rmd160  b63d1c771de821cc1006318199ec345906bc1d81 \
                    sha256  32098bea40117ea1ec23e7124cd188db6bdddd0ea41e2ec9bea3ba35a487e39c \
                    size    130379321 \
                    ${go_amdbin_dist} \
                    rmd160  95066d1c18134ad7ccb009f168a29d88c190eadc \
                    sha256  84979d5985c70cee6f303050a7e811440aad7f304efdf28665b200f096b01945 \
                    size    136908820

    livecheck.regex {go([0-9.A-z]+)\.src\.tar\.gz}
} else {
    # Go (RELEASE)

    if {${unsupported_macos}} {
        # 1.17
        checksums   ${go_src_dist} \
                    rmd160  d0984a86406eca5627518d2b3d6c763014fb5f35 \
                    sha256  ac2649a65944c6a5abe55054000eee3d77196880da36a3555f62e06540e8eb54 \
                    size    22197784 \
                    ${go_armbin_dist} \
                    rmd160  9683b2483d2df5f66406c5f12805397636daf852 \
                    sha256  b8e1ab009c2ff8dea462c7a1263d1f3f38e90ab5262e74c76d70e41a4db320be \
                    size    130409169 \
                    ${go_amdbin_dist} \
                    rmd160  b5c54c743b87804a6caad74507233baa202d4cc8 \
                    sha256  4f924c534230de8f0e1c7369f611c0310efd21fc2d9438b13bc2703af9dda25a \
                    size    136946048

        notes-append "
            Please note: Go 1.18 does not build on macOS 10.12 and older, so Go ${version} has been installed.
        "
    } else {
        # 1.18
        checksums   ${go_src_dist} \
                    rmd160  07b66dbfcf149fc1eb0dbd2b35065542f1dd371b \
                    sha256  0012386ddcbb5f3350e407c679923811dbd283fcdc421724931614a842ecbc2d \
                    size    22838104 \
                    ${go_armbin_dist} \
                    rmd160  0db4408aa50e57d746062653de6131722be45f19 \
                    sha256  40ecd383c941cc9f0682e6a6f2a333539d58c7dea15c842434d03afafe2f7242 \
                    size    138149747 \
                    ${go_amdbin_dist} \
                    rmd160  0dc730625aca7d8cf676fe6597ee5e867057a4e0 \
                    sha256  d9dcf8fc35da54c6f259be41954783a9f4984945a855d03a003a7fd6ea4c5ca1 \
                    size    143762106
    }

    livecheck.regex {go([0-9.]+)\.src\.tar\.gz}
}

master_sites        https://storage.googleapis.com/golang/
distfiles           ${go_src_dist}
worksrcdir          ${subport}

maintainers         {ciserlohn @ci42} \
                    {gmail.com:herby.gillot @herbygillot} \
                    openmaintainer

extract.only        ${go_src_dist}

set GOROOT          ${worksrcpath}
set GOROOT_FINAL    ${prefix}/lib/${subport}

supported_archs     arm64 i386 x86_64

switch ${configure.build_arch} {
    arm64 {
        set GOARCH arm64
    }
    i386 {
        set GOARCH 386
    }
    x86_64 {
        set GOARCH amd64
    }
    default {
        set GOARCH {}
    }
}

use_configure       no

build.dir           ${worksrcpath}/src
build.cmd           ./make.bash
build.target
build.env           GOROOT=${GOROOT} \
                    GOARCH=${GOARCH} \
                    GOOS=darwin \
                    GOROOT_FINAL=${GOROOT_FINAL} \
                    CC=${configure.cc}
# Set build.jobs to -1 to disable MacPorts from adding the -j flag for
# parallel builds, since the build.cmd contains "make".
build.jobs          -1

if {${os.platform} eq "darwin" && ${os.major} <= ${legacysupport.newest_darwin_requires_legacy}} {
    # The legacy support PG will not actually change anything in this port directly,
    # since go doesn't use the standard CFLAGS/CXXFLAGS.
    # We need to patch the build system and set up env variables manually.

    # Older compilers don't support the -Wno-nullability-completeness flag and if
    # that's the case, they won't need it anyway, so just patch it out.
    patchfiles-append   patch-cgo-drop-no-nullability-completeness.diff

    # Fix building with the -x flag ("show all commands as they are executed"),
    # useful for debugging of the bootstrapping process.
    # Only needed for debugging the build/bootstrapping process.
    # FIXME: report this as a bug and have it or a better version of it upstreamed.
    #patchfiles-append   patch-go-internal-buildid-and-gc-fix-debug.diff

    # Show all commands while building packages and only build one package at a time in
    # the last bootstrapping step.
    # Only needed for debugging the build/bootstrapping process.
    #patchfiles-append   patch-build-show-commands.diff

    build.env-append    "GO_EXTLINK_ENABLED=1" \
                        "GO_LDFLAGS=\"-extldflags=${configure.ldflags}\"" \
                        "BOOT_GO_LDFLAGS=-extldflags=${configure.ldflags}" \
                        "CGO_LDFLAGS=-g -O2 ${configure.ldflags}"

    # Might be useful while debugging issues.
    build.args-append   "-v=3"

    notes-append [subst {
                    go had to be specially patched and built to work on your platform.

                    It likely won't work out of the box when building other projects,\
                    so make sure change your environment to use the following variables:
                      * GO_EXTLINK_ENABLED="1"
                    to always force go to use the external gcc or clang linker and
                      * GO_LDFLAGS="\\\"-extldflags=\${configure.ldflags}\\\""
                      * CGO_LDFLAGS="-g -O2 \${configure.ldflags}"
                    to force-link any binary against the legacy support library.\
                    Use exactly the quoting provided here, even if it may look odd,\
                    or compilation will fail.

                    Failure to do so will leave you unable to create binaries that use\
                    features not natively available on your system, either directly\
                    or through a go core dependency.
    }]
}

if {${os.platform} eq "darwin" && ${os.major} eq 10} {
    # The branch https://github.com/catap/go/tree/macos-10.6
    patchfiles-append   patch-macOS-10.6.diff
}

use_parallel_build  no

if {${configure.build_arch} eq "arm64"} {

    # Use a temporary installation of the binary ARM64 Go distribution to
    # build Go for ARM64
    set go_bin_path         ${workpath}/${subport}_prebuilt

    build.env-append        GOROOT_BOOTSTRAP=${go_bin_path}/go

    distfiles-append        ${go_armbin_dist}

    post-extract {
        xinstall -d ${go_bin_path}
        system -W ${go_bin_path} \
            "${extract.cmd} ${extract.pre_args} ${distpath}/${go_armbin_dist} ${extract.post_args}"
    }

} elseif {${configure.build_arch} eq "x86_64" && ${os.major} >= 21} {

    # Use a temporary installation of the binary AMD64 Go distribution to
    # build Go for AMD64 on macOS 12 since go-1.4 fails to build
    set go_bin_path         ${workpath}/${subport}_prebuilt

    build.env-append        GOROOT_BOOTSTRAP=${go_bin_path}/go

    distfiles-append        ${go_amdbin_dist}

    post-extract {
        xinstall -d ${go_bin_path}
        system -W ${go_bin_path} \
            "${extract.cmd} ${extract.pre_args} ${distpath}/${go_amdbin_dist} ${extract.post_args}"
    }

} else {

    build.env-append        GOROOT_BOOTSTRAP=${prefix}/lib/go-1.4

    depends_build-append    port:go-1.4
}

post-build {
    system "find ${worksrcpath} -type d -name .hg* -print0 | xargs -0 rm -rf"
    delete ${worksrcpath}/pkg/bootstrap
}

if {$subport eq "${name}-devel"} {
    set bin_suffix "-devel"

    notes "
        go-devel binaries are installed with a ${bin_suffix} suffix:
        - go${bin_suffix}
        - gofmt${bin_suffix}
    "
} else {
    set bin_suffix ""
}

destroot {

    delete ${worksrcpath}/src/cmd/vendor/github.com/google/pprof/internal/binutils/testdata/malformed_macho

    set grfdir ${destroot}${GOROOT_FINAL}
    set docdir ${destroot}${prefix}/share/doc/${subport}

    xinstall -d ${grfdir}
    xinstall -d ${docdir}

    foreach f {api bin lib misc pkg src test} {
        copy ${worksrcpath}/${f} ${grfdir}
    }

    foreach f {go gofmt} {
        system -W ${destroot}${prefix}/bin/ "ln -s ../lib/${subport}/bin/$f ./${f}${bin_suffix}"
    }

    xinstall -m 0644 -W ${worksrcpath} \
        AUTHORS \
        CONTRIBUTING.md \
        CONTRIBUTORS \
        LICENSE \
        README.md \
        PATENTS \
        VERSION \
        ${docdir}

    copy {*}[glob -directory ${worksrcpath}/doc *] ${docdir}
}

if {${os.platform} eq "darwin" && ${os.major} < 10} {
    known_fail yes
    pre-fetch {
        ui_error "${subport} @${version} requires Mac OS X 10.6 or greater."
        return -code error "incompatible Mac OS X version"
    }
}
